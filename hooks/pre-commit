#!/bin/sh

qt_path=
build_path=

printf "Running linter and dry-running formatter on source files.\n"

res=0

#
# Run clang-tidy and clang-format on C and C++ files
#

if [ -z "$build_path" ];
then
    build_path=$(find . -wholename \*/build/* \
        | head -n 1 \
        | xargs realpath -m --relative-to=.)
fi

if [ -z "$build_path" ];
then
    printf "Aborting commit due to not finding the build directory. %s\n" \
        "Please check the path in the pre-commit file."
    exit 1
fi

for file in $(git diff-index --cached --name-only HEAD \
              | grep -iE '\.(c|cpp|h|hpp)$');
do
    # the checks are listed in the .clang-tidy config file
    clang-tidy $file \
        -p $build_path \
        --warnings-as-errors=*
    res=$(( $res | $? ))

    clang-format $file \
        --style=InheritParentConfig \
        --dry-run \
        --Werror
    res=$(( $res | $? ))
done

#
# Run qmllint and qmlformat on QML files
#

if [ -z "$qt_path" ];
then
    qt_path=$(find ~/Qt -maxdepth 4 -wholename \*/bin/qmllint \
        | head -n 1 \
        | xargs realpath \
        | xargs dirname)
fi

if [ -z "$qt_path" ];
then
    printf "Aborting commit due to not finding qmllint and qmlformat. %s\n" \
        "Please check the path in the pre-commit file."
    exit 1
fi

for file in $(git diff-index --cached --name-only HEAD \
              | grep -iE '\.(qml)$');
do
    printf "file $file\n"
    $qt_path/qmllint $file
    res=$(( $res | $? ))

    $qt_path/qmlformat $file \
        | diff $file - \
            --unchanged-line-format="" \
            --old-line-format="[qmlformat:$file:%dn] %L" \
            --new-line-format="   %dn | %L"
    # The format for "new-line" matches the output format of clang-format
    res=$(( $res | $? ))
done

#
# Output result and set return code
#

if [ $res -eq 0 ];
then
    printf "Ok\n"
    exit 0
fi

printf "Aborting commit due to one or more warnings or an error.\n"
exit 1
